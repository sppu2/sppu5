1. SQL Queries:
 Design and Develop SQL DDL statements which demonstrate the use of SQL objects such as Table,
View, Index, Sequence, Synonym, different constraints etc.
 Write at least 10 SQL queries on the suitable database application using SQL DML statements.
Note: Instructor will design the queries which demonstrate the use of concepts like Insert, Select, Update,
Delete with operators, functions, and set operator etc.


 create database nakul;
 show databases;
 use nakul;

-- Create a database
CREATE DATABASE my_database;
SHOW DATABASES;

-- Use the database
USE my_database;

-- Create a table with an auto-increment primary key
  CREATE TABLE employees (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  department VARCHAR(255) NOT NULL,
  status VARCHAR(255) NOT NULL DEFAULT 'active'
);
SHOW TABLES;

-- Add dummy data to the table
INSERT INTO employees (name, email, department, status) VALUES ('John Doe', 'john.doe@example.com', 'Engineering', 'active');
INSERT INTO employees (name, email, department, status) VALUES ('Jane Doe', 'jane.doe@example.com', 'Sales', 'active');
INSERT INTO employees (name, email, department, status) VALUES ('Peter Parker', 'peter.parker@example.com', 'Marketing', 'active');
SELECT * FROM employees;

-- Create a view of all active employees
CREATE VIEW active_employees AS
SELECT id, name, email, department FROM employees WHERE status = 'active';
SHOW tables;

-- Display all active employees
SELECT * FROM active_employees;

-- Create an index on the employee name column
CREATE INDEX idx_employees_name ON employees (name);
show indexes from employees;


In MySQL, sequences are not natively supported, as mentioned earlier. To simulate the use of a sequence-like behavior in MySQL, you can use an AUTO_INCREMENT column, which is a common approach for generating unique ID values automatically. Here's how you can modify your table creation to use AUTO_INCREMENT:

With this modification, the id column will automatically generate unique values as you insert data into the table. This mimics the behavior of a sequence in MySQL.

While MySQL doesn't have native sequence support, you can use the AUTO_INCREMENT feature for auto-generating unique identifiers. However, it's not referred to as a "sequence" in MySQL but serves a similar purpose.

-- Create a synonym (alias) for the active_employees view
CREATE VIEW emp_view AS SELECT * FROM active_employees;











1)b) Write at least 10 SQL queries on the suitable database application using SQL DML statements.
Note: Instructor will design the queries which demonstrate the use of concepts like Insert, Select, Update,
Delete with operators, functions, and set operator etc

Certainly, here are the 10 SQL queries in a single document:


-- 1. Insert a new employee record
INSERT INTO employees (name, email, department, status) VALUES ('Alice Johnson', 'alice.j@example.com', 'Finance', 'active');
SHOW COLUMNS FROM employees;

-- 2. Select all employees in the Sales department
SELECT * FROM employees WHERE department = 'Sales';
SHOW COLUMNS FROM employees;

-- 3. Update the status of an employee
UPDATE employees SET status = 'inactive' WHERE name = 'Jane Doe';
SHOW COLUMNS FROM employees;

-- 4. Delete an employee record
DELETE FROM employees WHERE name = 'John Doe';
SHOW COLUMNS FROM employees;

-- 5. Select employees whose names start with 'A' and have an email in the 'example.com' domain
SELECT * FROM employees WHERE name LIKE 'A%' AND email LIKE '%example.com';
SHOW COLUMNS FROM employees;

-- 6. Select the count of employees in each department
SELECT department, COUNT(*) FROM employees GROUP BY department;
SHOW COLUMNS FROM employees;

-- 7. Update the department of an employee
UPDATE employees SET department = 'HR' WHERE name = 'Alice Johnson';
SHOW COLUMNS FROM employees;

-- 8. Select the employee with the highest ID
SELECT * FROM employees WHERE id = (SELECT MAX(id) FROM employees);
SHOW COLUMNS FROM employees;

-- 9. Delete all employees with the status 'inactive'
DELETE FROM employees WHERE status = 'inactive';
SHOW COLUMNS FROM employees;

-- 10. Select the top 3 highest-paid employees
SELECT * FROM employees ORDER BY salary DESC LIMIT 3;
SHOW COLUMNS FROM employees;

-- Select employees whose names start with 'J' and have email in either 'example.com' or 'company.com' domain
SELECT name, 'Employee' AS type FROM employees WHERE name LIKE 'J%' AND (email LIKE '%example.com' OR email LIKE '%company.com')
UNION
SHOW COLUMNS FROM employees;

-- Select employees whose names start with 'P' and have email in 'org.com' domain
SELECT name, 'Employee' AS type FROM employees WHERE name LIKE 'P%' AND email LIKE '%org.com';
SHOW COLUMNS FROM employees;












Here are the operators, functions, and set operators used in the provided SQL code:

Operators:
1. **Comparison Operators:** Used in `WHERE` clauses for filtering data based on specific conditions.
   - `=` (equal)
   - `LIKE` (pattern matching)
   - `>` (greater than)

2. **Logical Operators:** Logical operators are used to combine multiple conditions in `WHERE` clauses.
   - `AND` (logical AND)

Functions:
1. **Aggregate Functions:** These functions are used for data aggregation, such as counting and finding the maximum value.
   - `COUNT(*)`: Counts the number of rows in a result set.
   - `MAX(id)`: Finds the maximum value of the `id` column.

Set Operator:
1. **UNION:** The `UNION` set operator combines the results of two separate `SELECT` statements into a single result set, removing duplicates. In your code, `UNION` is used to combine results from two separate `SELECT` statements involving employees whose names start with 'J' or 'P' and specific email domain conditions.

Please note that some functions and operators might be implied in the code but are not explicitly used (e.g., arithmetic operators). The provided code primarily demonstrates the use of `SELECT`, `INSERT`, `UPDATE`, and `DELETE` statements with various filtering conditions.

