3. MongoDB Queries:
Design and Develop MongoDB Queries using CRUD operations. (Use CRUD operations, SAVE method,
logical operators etc.).


Certainly! MongoDB is a NoSQL database that supports CRUD (Create, Read, Update, Delete) operations. Here are some examples of how to design and develop MongoDB queries using these operations, along with other methods and logical operators:


db

show collections

db.createCollection("employees");








1. Create (INSERT):
   To insert a new document into a MongoDB collection, you can use the `insertOne()` or `insertMany()` method. Here's an example using `insertOne()`:


db.collectionName.insertOne({
  name: "John Doe",
  age: 30,
  email: "johndoe@example.com"
})



2. Read (FIND):
   To retrieve documents from a collection, you can use the `find()` method. You can filter the results using logical operators like `$and`, `$or`, and more. Here's an example using `find()` with logical operators:


db.collectionName.find({
  $or: [
    { age: { $gte: 25 } },   // age is greater than or equal to 25
    { email: "johndoe@example.com" } // email is "johndoe@example.com"
  ]
})


3. Update (UPDATE):
   To modify existing documents, you can use the `updateOne()` or `updateMany()` method. Here's an example using `updateOne()`:


db.collectionName.updateOne(
  { name: "John Doe" },
  {
    $set: { age: 31 } // Update the age to 31
  }
)


4. Delete (DELETE):
   To remove documents from a collection, you can use the `deleteOne()` or `deleteMany()` method. Here's an example using `deleteOne()`:


db.collectionName.deleteOne({ name: "John Doe" })


5. Save Method:
   The `save()` method can be used to insert or update documents based on the presence of an `_id` field. If the document has an `_id`, it will update the existing document with the same `_id`. If not, it will insert a new document. Here's an example using `save()`:


const document = {
  _id: ObjectId("document_id"),
  name: "Jane Smith",
  age: 28,
  email: "janesmith@example.com"
}

db.collectionName.save(document)


Remember to replace `collectionName` and field names with the actual collection and field names in your MongoDB database. Also, make sure you have established a connection to your MongoDB database before running these queries, and you may need to use appropriate drivers or libraries depending on the programming language you are using.








or 









> use assignment9
switched to db assignment9

> db.createCollection('Student')
{ "ok" : 1 }

db.Student.insert({
  roll:1,
  name:'Aditi',
  email:'aditi@abc.com',
  marks:95
});
WriteResult({ "nInserted" : 1 })

db.Student.insert({
  roll:2,
  name:'Aditya',
  email:'aditya@abc.com',
  marks:85  
});
WriteResult({ "nInserted" : 1 })

db.Student.insert({
  roll:3,
  name:'Anurag',
  email:'anurag@abc.com',
  marks:75
});
WriteResult({ "nInserted" : 1 })

db.Student.save({
  _id: ObjectId("618cdf5fe73d5c5dbe58485d"),
  roll:4,
  name:'Aryan',
  email:'aryan@abc.com',
  marks:92  
});
WriteResult({
  "nMatched" : 0,
  "nUpserted" : 1,
  "nModified" : 0,
  "_id" : ObjectId("618cdf5fe73d5c5dbe58485d")
})


> db.Student.find().pretty()
{
  "_id" : ObjectId("618cdf51e73d5c5dbe58485a"),
  "roll" : 1,
  "name" : "Aditi",
  "email" : "aditi@abc.com",
  "marks" : 95
}
{
  "_id" : ObjectId("618cdf57e73d5c5dbe58485b"),
  "roll" : 2,
  "name" : "Aditya",
  "email" : "aditya@abc.com",
  "marks" : 85
}
{
  "_id" : ObjectId("618cdf5fe73d5c5dbe58485c"),
  "roll" : 3,
  "name" : "Anurag",
  "email" : "anurag@abc.com",
  "marks" : 75
}
{
  "_id" : ObjectId("618cdf5fe73d5c5dbe58485d"),
  "roll" : 4,
  "name" : "Aryan",
  "email" : "aryan@abc.com",
  "marks" : 92
}

>db.Student.update(
  {marks:{$gte: 90}},
  {$set:{grade:'A'}},
  {multi:true}
)
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })
>db.Student.update(
  {$and:[{marks:{$lt: 90}},{marks:{$gte: 70}}]},
  {$set:{grade:'B'}},
  {multi:true}
)
WriteResult({ "nMatched" : 2, "nUpserted" : 0, "nModified" : 2 })

> db.Student.find().pretty()
{
  "_id" : ObjectId("618cdf51e73d5c5dbe58485a"),
  "roll" : 1,
  "name" : "Aditi",
  "email" : "aditi@abc.com",
  "marks" : 95,
  "grade" : "A"
}
{
  "_id" : ObjectId("618cdf57e73d5c5dbe58485b"),
  "roll" : 2,
  "name" : "Aditya",
  "email" : "aditya@abc.com",
  "marks" : 85,
  "grade" : "B"
}
{
  "_id" : ObjectId("618cdf5fe73d5c5dbe58485c"),
  "roll" : 3,
  "name" : "Anurag",
  "email" : "anurag@abc.com",
  "marks" : 75,
  "grade" : "B"
}
{
  "_id" : ObjectId("618cdf5fe73d5c5dbe58485d"),
  "roll" : 4,
  "name" : "Aryan",
  "email" : "aryan@abc.com",
  "marks" : 92,
  "grade" : "A"
}

>db.Student.remove({'roll':4});
>db.Student.find().pretty()
{
  "_id" : ObjectId("618cdf51e73d5c5dbe58485a"),
  "roll" : 1,
  "name" : "Aditi",
  "email" : "aditi@abc.com",
  "marks" : 95,
  "grade" : "A"
}
{
  "_id" : ObjectId("618cdf57e73d5c5dbe58485b"),
  "roll" : 2,
  "name" : "Aditya",
  "email" : "aditya@abc.com",
  "marks" : 85,
  "grade" : "B"
}
{
  "_id" : ObjectId("618cdf5fe73d5c5dbe58485c"),
  "roll" : 3,
  "name" : "Anurag",
  "email" : "anurag@abc.com",
  "marks" : 75,
  "grade" : "B"
}

>db.Student.remove({'roll':2},1);
> db.Student.find().pretty()
{
  "_id" : ObjectId("618cdf51e73d5c5dbe58485a"),
  "roll" : 1,
  "name" : "Aditi",
  "email" : "aditi@abc.com",
  "marks" : 95,
  "grade" : "A"
}
{
  "_id" : ObjectId("618cdf5fe73d5c5dbe58485c"),
  "roll" : 3,
  "name" : "Anurag",
  "email" : "anurag@abc.com",
  "marks" : 75,
  "grade" : "B"
}
>db.Student.update(
  {roll:2},
  {$set:{roll:2,name:'Abhay',email:'abhay@abc.com',marks:87,grade:'A'}},
  {upsert:true}
)
> db.Student.find({roll:2})
{ "_id" : ObjectId("61922252378ee2632904d529"), "roll" : 2, "email" : "abhay@abc.com", "grade" : "A", "marks" : 87, "name" : "Abhay" }


It appears that you have successfully executed a series of MongoDB commands on a collection named "Student" within your MongoDB database. These commands include inserting documents, updating documents based on specific criteria, and removing documents. Here's a summary of the executed commands and their effects:

1. You created a collection named "Student" and inserted four documents into it.

2. You updated documents in the "Student" collection based on the "marks" field:
   - Documents with "marks" greater than or equal to 90 were assigned a "grade" of "A."
   - Documents with "marks" between 70 and 89 were assigned a "grade" of "B."

3. After the updates, you retrieved and displayed the contents of the "Student" collection.

4. You removed a document with the "roll" value of 4 from the "Student" collection.

5. You removed one document with the "roll" value of 2 from the "Student" collection.

6. You updated a document with the "roll" value of 2, or if it didn't exist, you inserted a new document with the specified values.

7. You queried and displayed the document with the "roll" value of 2 from the "Student" collection.

It seems like you've demonstrated various CRUD (Create, Read, Update, Delete) operations on your MongoDB collection. If you have any more questions or need further assistance with MongoDB or any other topics, please feel free to ask!
