4. Unnamed PL/SQLcode block: Use of Control structure and Exception handling is mandatory.
Suggested Problem statement:
Consider Tables:
1. Borrower (Roll_no, Name, Date_of_Issue, Name_of_Book, Status)
2. Fine (Roll_no, Date, Amt)
 Accept Roll_no and Name_of_Book from user.
 Check the number of days (from Date_of_Issue).
 If days are between 15 to 30 then fine amount will be Rs 5per day.
 If no. of days>30, per day fine will be Rs 50 per day and for days less than 30, Rs. 5 per day.
 After submitting the book, status will change from I to R.
 If condition of fine is true, then details will be stored into fine table.
 Also handles the exception by named exception handler or user define exception handler.




use assignment4;

create table borrower(
rollno INT,
name VARCHAR(100),
issue_date DATE,
book_name VARCHAR(100),
status CHAR(5),
PRIMARY KEY(rollno)
);

create table fine(
rollno INT PRIMARY KEY,
return_date DATE,
amount INT,
FOREIGN KEY (rollno) references borrower(rollno) on delete cascade
);

DELIMITER //
create procedure insert_student(IN roll_no INT,name VARCHAR(100),issue_date DATE,book_name VARCHAR(100),status CHAR(5))
BEGIN
insert into borrower values(roll_no,name,issue_date,book_name,status);
END
//
DELIMITER;

call insert_student(1,'Aditi','2021-08-15','JAVA','I');
call insert_student(2,'Aditya','2021-08-01','DBMS','I');
call insert_student(3,'Anurag','2021-08-31','TOC','I');
call insert_student(4,'Asim','2021-09-10','CNS','I');
call insert_student(5,'Aryan','2021-09-04','DS','I');
call insert_student(6,'Aneesh','2021-08-20','HCI','I');
call insert_student(7,'Abhishek','2021-08-13','PYTHON','I');

mysql> select * from borrower;
    -> //
+--------+----------+------------+-----------+--------+
| rollno | name     | issue_date | book_name | status |
+--------+----------+------------+-----------+--------+
|      1 | Aditi    | 2021-08-15 | JAVA      | I      |
|      2 | Aditya   | 2021-08-01 | DBMS      | I      |
|      3 | Anurag   | 2021-08-31 | TOC       | I      |
|      4 | Asim     | 2021-09-10 | CNS       | I      |
|      5 | Aryan    | 2021-09-04 | DS        | I      |
|      6 | Aneesh   | 2021-08-20 | HCI       | I      |
|      7 | Abhishek | 2021-08-13 | PYTHON    | I      |
+--------+----------+------------+-----------+--------+

DELIMITER //
create procedure calculate_fine(IN rno INT, n VARCHAR(10))
BEGIN
declare i_date DATE;
declare day_diff INT;
declare fine_amt INT;
DECLARE EXIT HANDLER FOR 1062 select 'Fine already paid';
select issue_date into i_date from borrower where rollno=rno and name=n;
select DATEDIFF(CURDATE(),i_date) into day_diff;
IF (day_diff >= 15 and day_diff <= 30) THEN
set fine_amt = day_diff * 5;
insert into fine values(rno,CURDATE(),fine_amt);
ELSEIF (day_diff > 30) THEN
set fine_amt = day_diff * 50;
insert into fine values(rno,CURDATE(),fine_amt);
END IF;
update borrower set status ='R' where rollno = rno and name=n;
END;
//
DELIMITER ;


call calculate_fine(4,'Asim');
mysql> select * from borrower;
+--------+----------+------------+-----------+--------+
| rollno | name     | issue_date | book_name | status |
+--------+----------+------------+-----------+--------+
|      1 | Aditi    | 2021-08-15 | JAVA      | I      |
|      2 | Aditya   | 2021-08-01 | DBMS      | I      |
|      3 | Anurag   | 2021-08-31 | TOC       | I      |
|      4 | Asim     | 2021-09-10 | CNS       | R      |
|      5 | Aryan    | 2021-09-04 | DS        | I      |
|      6 | Aneesh   | 2021-08-20 | HCI       | I      |
|      7 | Abhishek | 2021-08-13 | PYTHON    | I      |
+--------+----------+------------+-----------+--------+

call calculate_fine(1,'Aditi');
mysql> select * from fine;
+--------+-------------+--------+
| rollno | return_date | amount |
+--------+-------------+--------+
|      1 | 2021-09-13  |    145 |
+--------+-------------+--------+
mysql> select * from borrower;
+--------+----------+------------+-----------+--------+
| rollno | name     | issue_date | book_name | status |
+--------+----------+------------+-----------+--------+
|      1 | Aditi    | 2021-08-15 | JAVA      | R      |
|      2 | Aditya   | 2021-08-01 | DBMS      | I      |
|      3 | Anurag   | 2021-08-31 | TOC       | I      |
|      4 | Asim     | 2021-09-10 | CNS       | R      |
|      5 | Aryan    | 2021-09-04 | DS        | I      |
|      6 | Aneesh   | 2021-08-20 | HCI       | I      |
|      7 | Abhishek | 2021-08-13 | PYTHON    | I      |
+--------+----------+------------+-----------+--------+

mysql> call calculate_fine(1,'Aditi');
+-------------------+
| Fine already paid |
+-------------------+
| Fine already paid |
+-------------------+


or















mysql> use Abhi;
Reading table information for completion of table and column
names You can turn off this feature to get a quicker startup with -A
Database changed
mysql> delimiter //
mysql> call B1(1,'TOC') //
+-----------+
| NOT FOUND |
+-----------+| NOT FOUND |
+-----------+
1 row in set (0.35 sec)
Query OK, 0 rows affected (0.41 sec)
mysql> select * from Borrower;
-> //
+---------+----------+------------+-----------+----------+
| roll_no | name
| DOI
| book_name | status
|
+---------+----------+------------+-----------+----------+
| 12 | patel | 2018-07-01 | xyz | issued |
| 14 | shinde | 2018-06-01 | oop | issued |
| 16 | bhangale | 2018-05-01 | coa | returned |
| 18 | rebello | 2018-06-15 | toc | returned |
| 20 | patil | 2018-05-15 | mp | issued
|
+---------+----------+------------+-----------+----------+
5 rows in set (0.00 sec)
mysql> show tables;
-> //
+----------------+
| Tables_in_Abhi |
+----------------+
| Borrower |
| Employee |
| Fine |
| TE |
| _master |
| auto |
| c_master |
| capital || customer |
| orders |
| person |
| product_master |
| state
|
+----------------+
13 rows in set (0.00 sec)
mysql> create procedure B(roll_new int,book_name varchar(20))
-> begin
-> declare X integer;
-> declare continue handler for not found
-> begin
-> select 'NOT FOUND';
-> end;
-> select datediff(curdate(),DOI) into X from Borrower
where roll_no=roll_new;
->
if (X>15&&X<30)
-> then
-> insert into Fine values(roll_new,curdate(),(X*5));
-> end if;
-> if (X>30)
-> then
-> insert into Fine values(roll_new,curdate(),(X*50));
-> end if;
-> update Borrower set status='returned' where
roll_no=roll_new;
-> end;
-> //
Query OK, 0 rows affected (0.02 sec)
mysql> call B(12,'xyz');-> //
Query OK, 1 row affected (0.42 sec)
mysql> select * from Fine;//
+---------+------------+--------+
| roll_no | fine_date
| amount |
+---------+------------+--------+
|
12 | 2018-07-28 |
135 |
+---------+------------+--------+
1 row in set (0.00 sec)
mysql> select * from Borrower;//
+---------+----------+------------+-----------+----------+
| roll_no | name
| DOI
| book_name | status
|
+---------+----------+------------+-----------+----------+
| 12 | patel | 2018-07-01 | xyz | returned |
| 14 | shinde | 2018-06-01 | oop | issued
| 16 | bhangale | 2018-05-01 | coa | returned |
| 18 | rebello | 2018-06-15 | toc | returned |
| 20 | patil | 2018-05-15 | mp | issued
|
|
+---------+----------+------------+-----------+----------+
5 rows in set (0.00 sec)
mysql> call B(20,'patil');
-> //
Query OK, 1 row affected (0.35 sec)
mysql> select * from Fine;//
+---------+------------+--------+
| roll_no | fine_date
| amount |
+---------+------------+--------+
|
12 | 2018-07-28 |
135 ||
20 | 2018-07-28 |
3700 |
+---------+------------+--------+
2 rows in set (0.00 sec)
mysql> select * from Borrower;//
+---------+----------+------------+-----------+----------+
| roll_no | name
| DOI
| book_name | status
|
+---------+----------+------------+-----------+----------+
| 12 | patel | 2018-07-01 | xyz | returned |
| 14 | shinde | 2018-06-01 | oop | issued
| 16 | bhangale | 2018-05-01 | coa | returned |
| 18 | rebello | 2018-06-15 | toc | returned |
| 20 | patil | 2018-05-15 | mp | returned |
|
+---------+----------+------------+-----------+----------+
5 rows in set (0.00 sec)
mysql>
